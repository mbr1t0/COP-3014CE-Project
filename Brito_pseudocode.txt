BEGIN
    // The program will allow the user to input: 
    // the name, total hours played, price, and personal rating from 1-5 stars for 10 video games.
    // The user will then recieve a result of: 
    // total game hours, average game hours, total money spent, average game ratings and some feedback.

    // Declare arrays that store game data
	DECLARE Integer gameNum = 10 // Number of games
	DECLARE String gameNames[gameNum] AS Array
	DECLARE Real gameHours[gameNum] AS Array
	DECLARE Real gamePrices[gameNum] AS Array
	DECLARE Real gameRatings[gameNum] AS Array

    // Declare variables for overall statistics
	DECLARE Real totalHours = 0.0
	DECLARE Real totalMoney = 0.0
	DECLARE Real totalRate = 0.0
	DECLARE Real averageHours = 0.0
	DECLARE Real averageRate = 0.0

	// Void function to display results
	FUNCTION displayResults()
		OUTPUT “Total hours played: “, totalHours, “ hours”
		OUTPUT  "Average hours played: “, averageHours, " hours"
		OUTPUT "Total money spent: $”, totalMoney
		OUTPUT "Average game ratings: “, averageRate, “%”
	END FUNCTION

	// Value-returning funciton to calculate average hours played
	FUNCTION calculateAverageHours()
		RETURN totalHours / gameNum
	END FUNCTION

	// Pass-by-reference function to calculate and update average rate
	FUNCTION updateAverageRate(averageRate)
		SET averageRate = totalRate / gameNum
	END FUNCTION

	// Main program starts
	// Prompts user to enter following information
	OUTPUT "Enter the following information for 10 different video games."
	
	// Prompts user to enter following information for 10 games
	// Loops 10 times
	FOR i = 0 TO gameNum - 1
		OUTPUT “Game “, i + 1, “:” 

		// Prompts user to enter name of the video game
		OUTPUT "What is the name of this video game?: "
		INPUT gameNames[i]

		// Prompts user to enter total hours played on the game
		// Loops until Input is Positive
		DO WHILE gameHours[i] < 0
			OUTPUT "How many total hours have you played?: "
			INPUT gameHours[i]
			IF gameHours[i] < 0 THEN
				OUTPUT "Error: Enter a valid number that is not negative."
			END IF
		END DO WHILE

		// Prompts user to enter price of the game
		// Loops until Input is Positive
		DO WHILE gamePrices[i] < 0
			OUTPUT "What is the price of the video game?: $"
			INPUT gamePrices[i]
			IF gamePrices[i] < 0 THEN
				OUTPUT "Error: Enter a valid number that is not negative."
			END IF
		END DO WHILE

		// Prompts user to enter personal game rating
		// Loops until input is ranged from 1-5
		DO WHILE gameRatings[i] < 1.0 OR gameRatings[i] > 5.0
			OUTPUT "What would you rate this game from a scale of 1-5 stars?: "
			INPUT gameRatings[i]
			IF gameRatings[i] < 1.0 OR gameRatings[i] > 5.0 THEN
				OUTPUT "Error: Enter a valid number that ranges from 1-5."
			END IF
		END DO WHILE
		
		// All variables will update every loop
		SET totalHours = totalHours + gameHours[i]
		SET totalMoney = totalMoney + gamePrices[i]
		SET totalRate = totalRate + gameRatings[i]
	END FOR

	// Calculate the average game hours
	SET averageHours = calculateAverageHours()

	// Update the average rate
	CALL updateAverageRate(averageRate)

	// Display results
	CALL displayResults()

	// Declare category variable
	DECLARE Integer category

	// Assigns category with if statements
	IF averageRate >= 4.0 AND averageRate <= 5.0 THEN 
		SET category = 1
	ELSE IF averageRate >= 3.0 AND averageRate < 4.0 THEN 
		SET category = 2
	ELSE IF averageRate >= 0 AND averageRate < 3.0 THEN 
		SET category = 3
	ELSE
		SET category = 4
	END IF

	// Outputs feedback with switch statements
	SWITCH category
		CASE 1:
			OUTPUT "Wow! Some of these video games must be fun to play!"
		BREAK
		CASE 2:
			OUTPUT "Not bad! Some of these video games must be pretty decent!"
		BREAK
		CASE 3:
			OUTPUT "Ouch! Some of these video games must not be fun."
		BREAK
		DEFAULT:
			OUTPUT "Error."
		BREAK
	END SWITCH
END
